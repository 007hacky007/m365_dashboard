name: Arduino CI Builds

on:
  push:
    tags:
      - 'v*'
    branches:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      makeRelease:
        description: 'Create GitHub Release (manual runs)'
        required: false
        default: 'false'
      tag_name:
        description: 'Tag name for manual release (empty = manual-<sha>)'
        required: false
        default: ''
      release_name:
        description: 'Release name (optional)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as prerelease (manual runs)'
        required: false
        default: 'true'
      draft:
        description: 'Mark as draft (manual runs)'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    # Require manual approval via environment protection rules.
    # Create this environment in repo Settings > Environments and add required reviewers.
    environment:
      name: ci-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ProMini-16MHz
            fqbn: "arduino:avr:pro:cpu=16MHzatmega328"
            ext: hex
            build_flags: ""
          - name: ProMini-8MHz
            fqbn: "arduino:avr:pro:cpu=8MHzatmega328"
            ext: hex
            build_flags: ""
          - name: ESP32-Dev
            fqbn: "esp32:esp32:esp32"
            ext: bin
            build_flags: ""

          # SIM_MODE variants (compile-time synthetic data for simulator/testing)
          - name: ProMini-16MHz-SIM
            fqbn: "arduino:avr:pro:cpu=16MHzatmega328"
            ext: hex
            build_flags: '--build-property compiler.cpp.extra_flags="-DSIM_MODE" --build-property compiler.c.extra_flags="-DSIM_MODE"'
          - name: ProMini-8MHz-SIM
            fqbn: "arduino:avr:pro:cpu=8MHzatmega328"
            ext: hex
            build_flags: '--build-property compiler.cpp.extra_flags="-DSIM_MODE" --build-property compiler.c.extra_flags="-DSIM_MODE"'
          - name: ESP32-Dev-SIM
            fqbn: "esp32:esp32:esp32"
            ext: bin
            build_flags: '--build-property compiler.cpp.extra_flags="-DSIM_MODE" --build-property compiler.c.extra_flags="-DSIM_MODE"'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Init Arduino CLI config
        run: arduino-cli config init

      - name: Enable ZIP library install
        run: |
          arduino-cli config set library.enable_unsafe_install true
          arduino-cli config dump

      - name: Update core indexes (incl. ESP32)
        run: |
          arduino-cli core update-index \
            --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      - name: Install cores (AVR, ESP32)
        run: |
          arduino-cli core install arduino:avr
          arduino-cli core install esp32:esp32 \
            --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      - name: Install libraries from repo ZIPs
        run: |
          arduino-cli lib install --zip-path libraries/SSD1306Ascii.zip
          arduino-cli lib install --zip-path libraries/WatchDog-1.2.0.zip

      - name: Compile (${{ matrix.name }})
        run: |
          mkdir -p build/${{ matrix.name }}
          arduino-cli compile \
            --fqbn "${{ matrix.fqbn }}" \
            --export-binaries \
            --output-dir build/${{ matrix.name }} \
            ${{ matrix.build_flags }} \
            ./M365

      - name: Upload artifacts (${{ matrix.name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            build/${{ matrix.name }}/**/*.${{ matrix.ext }}
            build/${{ matrix.name }}/**/*.elf
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.makeRelease == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-artifacts"
          merge-multiple: true
          path: dist

      - name: Compute release metadata
        id: meta
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "push" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF_NAME}"
            NAME="${GITHUB_REF_NAME}"
            PRERELEASE="false"
            DRAFT="false"
          else
            TAG="${{ inputs.tag_name }}"
            [ -z "$TAG" ] && TAG="manual-${GITHUB_SHA}"
            NAME="${{ inputs.release_name }}"
            PRERELEASE="${{ inputs.prerelease }}"
            [ -z "$PRERELEASE" ] && PRERELEASE="true"
            DRAFT="${{ inputs.draft }}"
            [ -z "$DRAFT" ] && DRAFT="false"
          fi
          echo "rel_tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "rel_name=$NAME" >> "$GITHUB_OUTPUT"
          echo "rel_prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"
          echo "rel_draft=$DRAFT" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.rel_tag }}
          name: ${{ steps.meta.outputs.rel_name }}
          prerelease: ${{ steps.meta.outputs.rel_prerelease }}
          draft: ${{ steps.meta.outputs.rel_draft }}
          files: |
            dist/**/*.hex
            dist/**/*.bin
            dist/**/*.elf

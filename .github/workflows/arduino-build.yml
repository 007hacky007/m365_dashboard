name: ESP-IDF ESP32-C3 Build

on:
  push:
    tags:
      - 'v*'
    branches:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      makeRelease:
        description: 'Create GitHub Release (manual runs)'
        required: false
        default: 'false'
      tag_name:
        description: 'Tag name for manual release (empty = manual-<sha>)'
        required: false
        default: ''
      release_name:
        description: 'Release name (optional)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as prerelease (manual runs)'
        required: false
        default: 'true'
      draft:
        description: 'Mark as draft (manual runs)'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  build-idf:
    runs-on: ubuntu-latest
    env:
      IDF_TARGET: esp32c3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ESP-IDF (manual)
        run: |
          git clone --depth 1 --branch v5.2.2 https://github.com/espressif/esp-idf.git framework
          cd framework
          ./install.sh esp32c3
          echo "FRAMEWORK_DIR=$PWD" >> $GITHUB_ENV
          echo "source $PWD/export.sh" >> $GITHUB_ENV

      - name: Show IDF version
        run: |
          . "$FRAMEWORK_DIR/export.sh"
          idf.py --version

      - name: Build (esp32c3)
        run: |
          . "$FRAMEWORK_DIR/export.sh"
          # Prefer using project script (it sources its own env attempt, but we already exported)
          chmod +x scripts/build_local.sh
          IDF_PATH="$FRAMEWORK_DIR" idf.py -C esp-idf set-target esp32c3 || true
          IDF_PATH="$FRAMEWORK_DIR" scripts/build_local.sh || true
          # Direct fallback to ensure build
          if [ ! -f esp-idf/build/m365_dash_idf.bin ]; then
            echo "Direct idf.py build fallback";
            IDF_PATH="$FRAMEWORK_DIR" idf.py -C esp-idf set-target esp32c3
            IDF_PATH="$FRAMEWORK_DIR" idf.py -C esp-idf build
          fi

      - name: Collect artifacts
        run: |
          mkdir -p ci-artifacts
          cp -v esp-idf/build/m365_dash_idf.bin ci-artifacts/ || true
          cp -v esp-idf/build/bootloader/bootloader.bin ci-artifacts/ || true
          cp -v esp-idf/build/partition_table/partition-table.bin ci-artifacts/ || true
          cp -v esp-idf/build/m365_dash_idf.elf ci-artifacts/ || true
          ls -l ci-artifacts
          test -f ci-artifacts/m365_dash_idf.bin

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: esp32c3-firmware
          path: ci-artifacts/*
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: build-idf
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.makeRelease == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: esp32c3-firmware
          path: dist

      - name: Compute release metadata
        id: meta
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "push" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF_NAME}"
            NAME="${GITHUB_REF_NAME}"
            PRERELEASE="false"
            DRAFT="false"
          else
            TAG="${{ inputs.tag_name }}"
            [ -z "$TAG" ] && TAG="manual-${GITHUB_SHA}"
            NAME="${{ inputs.release_name }}"
            PRERELEASE="${{ inputs.prerelease }}"
            [ -z "$PRERELEASE" ] && PRERELEASE="true"
            DRAFT="${{ inputs.draft }}"
            [ -z "$DRAFT" ] && DRAFT="false"
          fi
          echo "rel_tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "rel_name=$NAME" >> "$GITHUB_OUTPUT"
          echo "rel_prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"
          echo "rel_draft=$DRAFT" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.rel_tag }}
          name: ${{ steps.meta.outputs.rel_name }}
          prerelease: ${{ steps.meta.outputs.rel_prerelease }}
          draft: ${{ steps.meta.outputs.rel_draft }}
          files: |
            dist/*.bin
            dist/*.elf

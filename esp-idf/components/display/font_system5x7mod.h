// Ported System5x7mod font (5x7) used in original Arduino build
#pragma once
#include <stdint.h>
// Each glyph 5x7 plus 1 column spacing handled manually; stored as 5 bytes (column-wise, LSB top)
typedef struct { char c; uint8_t col[5]; } sys57_glyph_t;
static const sys57_glyph_t SYS57_GLYPHS[] = {
    {'0',{0x3E,0x51,0x49,0x45,0x3E}}, {'1',{0x00,0x42,0x7F,0x40,0x00}}, {'2',{0x42,0x61,0x51,0x49,0x46}},
    {'3',{0x21,0x41,0x45,0x4B,0x31}}, {'4',{0x18,0x14,0x12,0x7F,0x10}}, {'5',{0x27,0x45,0x45,0x45,0x39}},
    {'6',{0x3C,0x4A,0x49,0x49,0x30}}, {'7',{0x01,0x71,0x09,0x05,0x03}}, {'8',{0x36,0x49,0x49,0x49,0x36}},
    {'9',{0x06,0x49,0x49,0x29,0x1E}}, {':',{0x00,0x36,0x36,0x00,0x00}}, {' ',{0x00,0x00,0x00,0x00,0x00}},
    {'.',{0x00,0x60,0x60,0x00,0x00}}, {'A',{0x7E,0x11,0x11,0x11,0x7E}}, {'B',{0x7F,0x49,0x49,0x49,0x36}},
    {'C',{0x3E,0x41,0x41,0x41,0x22}}, {'D',{0x7F,0x41,0x41,0x22,0x1C}}, {'E',{0x7F,0x49,0x49,0x49,0x41}},
    {'F',{0x7F,0x09,0x09,0x09,0x01}}, {'G',{0x3E,0x41,0x49,0x49,0x7A}}, {'H',{0x7F,0x08,0x08,0x08,0x7F}},
    {'I',{0x00,0x41,0x7F,0x41,0x00}}, {'K',{0x7F,0x08,0x14,0x22,0x41}}, {'M',{0x7F,0x02,0x04,0x02,0x7F}},
    {'N',{0x7F,0x04,0x08,0x10,0x7F}}, {'O',{0x3E,0x41,0x41,0x41,0x3E}}, {'P',{0x7F,0x09,0x09,0x09,0x06}},
    {'R',{0x7F,0x09,0x19,0x29,0x46}}, {'S',{0x46,0x49,0x49,0x49,0x31}}, {'T',{0x01,0x01,0x7F,0x01,0x01}},
    {'U',{0x3F,0x40,0x40,0x40,0x3F}}, {'V',{0x1F,0x20,0x40,0x20,0x1F}}, {'W',{0x7F,0x20,0x18,0x20,0x7F}},
    {'Y',{0x03,0x04,0x78,0x04,0x03}}, {'Z',{0x61,0x51,0x49,0x45,0x43}}, {'%',{0x23,0x13,0x08,0x64,0x62}},
};
static inline const sys57_glyph_t* sys57_lookup(char c){
    if (c>='a' && c<='z') c = (char)(c - 'a' + 'A');
    for (unsigned i=0;i<sizeof(SYS57_GLYPHS)/sizeof(SYS57_GLYPHS[0]);++i) if (SYS57_GLYPHS[i].c==c) return &SYS57_GLYPHS[i];
    return &SYS57_GLYPHS[11]; // space fallback
}
static inline void sys57_draw(u8g2_t *u,int x,int y,const char *s){
    while(*s){
        const sys57_glyph_t *g=sys57_lookup(*s++);
        for(int col=0;col<5;++col){
            uint8_t bits=g->col[col];
            for(int row=0;row<7;++row){ if(bits & (1<<row)) u8g2_DrawPixel(u,x+col,y+row); }
        }
        x+=6; // 5 + 1 spacing
    }
}

// Accessors for scaled rendering helpers
static inline const uint8_t* sys57_glyph(char c){
    const sys57_glyph_t *g = sys57_lookup(c);
    return g->col; // treat column array as raw pointer
}
static inline int sys57_glyph_pixel(const uint8_t *gCols, int gx, int gy){
    if(gx<0||gx>=5||gy<0||gy>=7) return 0;
    return (gCols[gx] & (1<<gy)) != 0;
}
#pragma once
#include <Arduino.h>

// Auto-converted from service.odroidn2.oled charset.py (sevenSeg and sevenSegLarge)
// Layout: column-major, each column has byteHeight bytes (8 rows per byte), LSB at row offset
// Glyph order: digits '0'..'9', then ':' as index 10

namespace OdroidSevenSeg {

static const uint8_t SevenSegMeta[4] PROGMEM = {17, 24, 3, 9}; // width, height, byteHeight, colonWidth
static const uint8_t SevenSegGlyphs[11][51] PROGMEM = {
  // '0'
  {0xf8,0xfc,0xfa,0xf7,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0xc3,0xe7,0xc3,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xc3,0xe7,0xc3,
   0x1f,0x3f,0x5f,0xef,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // '1'
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xf8,0xfc,0xf8,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xc3,0xe7,0xc3,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x1f,0x3f,0x1f},
  // '2'
  {0x00,0x00,0x02,0x07,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0xc0,0xe0,0xd8,0xbc,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3d,0x1b,0x07,0x03,
   0x1f,0x3f,0x5f,0xef,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xe0,0x40,0x00,0x00},
  // '3'
  {0x00,0x00,0x02,0x07,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0x00,0x00,0x18,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbd,0xdb,0xe7,0xc3,
   0x00,0x00,0x40,0xe0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // '4'
  {0xf8,0xfc,0xf8,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xf8,0xfc,0xf8,
   0x03,0x07,0x1b,0x3d,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbd,0xdb,0xe7,0xc3,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x1f,0x3f,0x1f},
  // '5'
  {0xf8,0xfc,0xfa,0xf7,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x07,0x02,0x00,0x00,
   0x03,0x07,0x1b,0x3d,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbc,0xd8,0xe0,0xc0,
   0x00,0x00,0x40,0xe0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // '6'
  {0xf8,0xfc,0xfa,0xf7,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x07,0x02,0x00,0x00,
   0xc3,0xe7,0xdb,0xbd,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbc,0xd8,0xe0,0xc0,
   0x1f,0x3f,0x5f,0xef,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // '7'
  {0x00,0x00,0x02,0x07,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0xc3,0xe7,0xc3,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x1f,0x3f,0x1f},
  // '8'
  {0xf8,0xfc,0xfa,0xf7,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0xc3,0xe7,0xdb,0xbd,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbd,0xdb,0xe7,0xc3,
   0x1f,0x3f,0x5f,0xef,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // '9'
  {0xf8,0xfc,0xfa,0xf7,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf7,0xfa,0xfc,0xf8,
   0x03,0x07,0x1b,0x3d,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0xbd,0xdb,0xe7,0xc3,
   0x00,0x00,0x40,0xe0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0x5f,0x3f,0x1f},
  // ':'
  {0x00,0x00,0x80,0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x81,0xc3,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x01,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};

static const uint8_t SevenSegLargeMeta[4] PROGMEM = {17, 32, 4, 9};
static const uint8_t SevenSegLargeGlyphs[11][68] PROGMEM = {
  // '0'
  {0xc0,0xe0,0xc8,0x9c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x3f,0x7f,0x3f,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x3f,0x7f,0x3f,
   0xfc,0xfe,0xfc,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xfc,0xfe,0xfc,
   0x03,0x07,0x13,0x39,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // '1'
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0,0xc0,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x3f,0x7f,0x3f,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xfc,0xfe,0xfc,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x03},
  // '2'
  {0x00,0x00,0x08,0x1c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x00,0x00,0x00,0x80,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x9f,0x3f,0x7f,0x3f,
   0xfc,0xfe,0xfc,0xf9,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x01,0x00,0x00,0x00,
   0x03,0x07,0x13,0x39,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x38,0x10,0x00,0x00},
  // '3'
  {0x00,0x00,0x08,0x1c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x00,0x00,0x00,0x80,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x9f,0x3f,0x7f,0x3f,
   0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x00,0x00,0x10,0x38,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // '4'
  {0xc0,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xc0,0xe0,0xc0,
   0x3f,0x7f,0x3f,0x9f,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x9f,0x3f,0x7f,0x3f,
   0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x03},
  // '5'
  {0xc0,0xe0,0xc8,0x9c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x1c,0x08,0x00,0x00,
   0x3f,0x7f,0x3f,0x9f,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x80,0x00,0x00,0x00,
   0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x00,0x00,0x10,0x38,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // '6'
  {0xc0,0xe0,0xc8,0x9c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x1c,0x08,0x00,0x00,
   0x3f,0x7f,0x3f,0x9f,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x80,0x00,0x00,0x00,
   0xfc,0xfe,0xfc,0xf9,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x03,0x07,0x13,0x39,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // '7'
  {0x00,0x00,0x08,0x1c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x3f,0x7f,0x3f,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xfc,0xfe,0xfc,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x03},
  // '8'
  {0xc0,0xe0,0xc8,0x9c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x3f,0x7f,0x3f,0x9f,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x9f,0x3f,0x7f,0x3f,
   0xfc,0xfe,0xfc,0xf9,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x03,0x07,0x13,0x39,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // '9'
  {0xc0,0xe0,0xc8,0x9c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x9c,0xc8,0xe0,0xc0,
   0x3f,0x7f,0x3f,0x9f,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x9f,0x3f,0x7f,0x3f,
   0x00,0x00,0x00,0x01,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xf9,0xfc,0xfe,0xfc,
   0x00,0x00,0x10,0x38,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x3c,0x39,0x13,0x07,0x03},
  // ':'
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x08,0x1c,0x1c,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x10,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};

inline void drawSmall(uint8_t x, uint8_t y, uint8_t glyph /*0-9,10=:*/){
  if (glyph > 10) return; const uint8_t W=17, BH=3; const uint8_t* g = SevenSegGlyphs[glyph];
  for (uint8_t col=0; col<W; ++col){
    for (uint8_t bh=0; bh<BH; ++bh){
      uint8_t b = pgm_read_byte(&g[bh*W + col]);
      for (uint8_t bit=0; bit<8; ++bit) if (b & (1<<bit)) display.drawPixel(x+col, y + bh*8 + bit);
    }
  }
}
inline void drawLarge(uint8_t x, uint8_t y, uint8_t glyph /*0-9,10=:*/){
  if (glyph > 10) return; const uint8_t W=17, BH=4; const uint8_t* g = SevenSegLargeGlyphs[glyph];
  for (uint8_t col=0; col<W; ++col){
    for (uint8_t bh=0; bh<BH; ++bh){
      uint8_t b = pgm_read_byte(&g[bh*W + col]);
      for (uint8_t bit=0; bit<8; ++bit) if (b & (1<<bit)) display.drawPixel(x+col, y + bh*8 + bit);
    }
  }
}

} // namespace
